services:
  ollama:
    volumes:
      - ollama:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    ports:
      - "11434:11434"
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: ollama/ollama:latest
    # GPU resources are configured in docker-compose.gpu.yml when available
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  open-webui:
    image: ghcr.io/open-webui/open-webui:latest
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
      - open-webui-data:/app/data
      - ./scripts/openwebui.sh:/app/backend/openwebui.sh
    environment:
      - DATA_DIR=/app/data
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:5432/${POSTGRES_DATABASE}
      - WEBUI_NAME=AIXCL
      - OLLAMA_BASE_URL=http://localhost:11434
      - OPENWEBUI_EMAIL=${OPENWEBUI_EMAIL}
      - OPENWEBUI_PASSWORD=${OPENWEBUI_PASSWORD}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - postgres
      - ollama
    network_mode: host
    restart: always
    command: ["/bin/bash", "-c", "chmod +x openwebui.sh && bash openwebui.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]  # Adjust the health endpoint as necessary
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DATABASE: $POSTGRES_DATABASE
    volumes:
      - postgres-data:/var/lib/postgresql/data
    network_mode: host
    restart: always
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
      -c log_rotation_age=1d
      -c log_rotation_size=100MB
      -c log_min_duration_statement=0
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  pgadmin:
    image: dpage/pgadmin4:9.0
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: $PGADMIN_EMAIL
      PGADMIN_DEFAULT_PASSWORD: $PGADMIN_PASSWORD
      PGADMIN_LISTEN_PORT: 5050
    volumes:
      - ./backups:/var/lib/pgadmin/storage
      - ./logs/pgadmin:/var/log/pgadmin
      - ./pgadmin-data:/var/lib/pgadmin
    user: "0:0"
    network_mode: host
    depends_on:
      - postgres
    restart: always
    entrypoint: >
      bash -c "
        chown -R 1000:1000 /var/lib/pgadmin/storage /var/lib/pgadmin &&
        chmod -R 755 /var/lib/pgadmin/storage /var/lib/pgadmin &&
        find /var/lib/pgadmin/storage -type d -exec chmod 755 {} \; &&
        find /var/lib/pgadmin/storage -type f -exec chmod 644 {} \; &&
        find /var/lib/pgadmin -type d -exec chmod 755 {} \; &&
        find /var/lib/pgadmin -type f -exec chmod 644 {} \; &&
        exec /entrypoint.sh
      "

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: open-webui
    restart: always

volumes:
  ollama:
  open-webui:
  open-webui-data:
  postgres-data:
