#!/usr/bin/env bash

set -e  # Exit on error
set -u  # Treat unset variables as an error
set -o pipefail  # Catch errors in pipelines

# Load environment variables from .env file
if [ -f .env ]; then
    export $(grep -v '^#' .env | xargs)
fi

# Allow custom Docker Compose file via environment variable
COMPOSE_FILE=${COMPOSE_FILE:-docker-compose.yml}
COMPOSE_CMD="docker-compose -f $COMPOSE_FILE"
CONTAINER_NAME="open-webui"

# Source the autocomplete script if it exists
if [ -f "$(dirname "$0")/aixcl_completion.sh" ]; then
    source "$(dirname "$0")/aixcl_completion.sh"
fi

function check_env() {
    echo "Checking environment dependencies..."
    local missing_deps=0

    # Check Docker
    if ! command -v docker &> /dev/null; then
        echo "❌ Docker is not installed"
        echo "   Install from: https://docs.docker.com/get-docker/"
        missing_deps=1
    else
        echo "✅ Docker is installed"
        # Check if Docker daemon is running
        if ! docker info &> /dev/null; then
            echo "❌ Docker daemon is not running"
            echo "   Start with: sudo systemctl start docker"
            missing_deps=1
        else
            echo "✅ Docker daemon is running"
        fi
    fi

    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "❌ Docker Compose is not installed"
        echo "   Install from: https://docs.docker.com/compose/install/"
        missing_deps=1
    else
        echo "✅ Docker Compose is installed"
    fi

    # Check NVIDIA drivers and toolkit (optional)
    echo -e "\nChecking NVIDIA support..."
    if ! command -v nvidia-smi &> /dev/null; then
        echo "⚠️ NVIDIA drivers not found (optional)"
        echo "   For GPU support, install NVIDIA drivers"
    else
        echo "✅ NVIDIA drivers installed"
        # Check NVIDIA Container Toolkit
        if ! dpkg -l | grep -q nvidia-container-toolkit; then
            echo "⚠️ NVIDIA Container Toolkit not found (optional)"
            echo "   For GPU support, install: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html"
        else
            echo "✅ NVIDIA Container Toolkit installed"
        fi
    fi

    # Check .env file
    echo -e "\nChecking configuration..."
    if [ ! -f .env ]; then
        echo "❌ .env file not found"
        echo "   Create one from .env.example"
        missing_deps=1
    else
        echo "✅ .env file exists"
        # Check required environment variables
        local required_vars=(
            "POSTGRES_USER"
            "POSTGRES_PASSWORD"
            "POSTGRES_DATABASE"
            "PGADMIN_EMAIL"
            "PGADMIN_PASSWORD"
            "OPENWEBUI_EMAIL"
            "OPENWEBUI_PASSWORD"
        )
        
        for var in "${required_vars[@]}"; do
            if ! grep -q "^${var}=" .env || [ -z "$(grep "^${var}=" .env | cut -d'=' -f2)" ]; then
                echo "❌ Missing or empty required variable: $var"
                missing_deps=1
            fi
        done
    fi

    # Check available disk space
    echo -e "\nChecking system resources..."
    local required_space=10 # GB
    local available_space=$(df -BG "$(pwd)" | awk 'NR==2 {print $4}' | sed 's/G//')
    
    if [ "$available_space" -lt "$required_space" ]; then
        echo "❌ Insufficient disk space. Required: ${required_space}GB, Available: ${available_space}GB"
        missing_deps=1
    else
        echo "✅ Sufficient disk space available"
    fi

    # Check memory
    local total_mem=$(free -g | awk '/^Mem:/{print $2}')
    if [ "$total_mem" -lt 8 ]; then
        echo "⚠️ Low memory detected (${total_mem}GB). Recommended: 8GB+"
    else
        echo "✅ Sufficient memory available"
    fi

    if [ $missing_deps -eq 1 ]; then
        echo -e "\n❌ Environment check failed. Please address the issues above."
        return 1
    else
        echo -e "\n✅ Environment check passed! You're ready to run AIXCL."
        return 0
    fi
}

function start() {
    echo "Starting Docker Compose deployment..."
    
    if docker ps --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
        echo "Services are already running. Use 'stop' first if you want to restart."
        exit 1
    fi

    modify_docker_compose_for_macos
    
    echo "Pulling latest images..."
    $COMPOSE_CMD pull
    
    echo "Starting services..."
    $COMPOSE_CMD up -d
    
    echo "Waiting for services to be ready..."
    for i in {1..30}; do
        if curl -s -o /dev/null -w "%{http_code}" http://localhost:11434/api/version 2>/dev/null | grep -q "200" && \
           curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 2>/dev/null | grep -q "200" && \
           docker exec postgres pg_isready -U webui >/dev/null 2>&1; then
            echo "All services are up and running!"
            status
            return 0
        fi
        echo "Waiting for services to become available... ($i/30)"
        sleep 2
    done
    
    echo "Error: Services did not start properly within timeout period"
    status
    exit 1
}

function stop() {
    echo "Stopping Docker Compose deployment..."
    
    if ! docker ps --format "{{.Names}}" | grep -qE "$CONTAINER_NAME|ollama|postgres|pgadmin|watchtower"; then
        echo "Services are not running."
        return 0
    fi
    
    echo "Stopping services gracefully..."
    $COMPOSE_CMD down --remove-orphans
    
    echo "Waiting for containers to stop..."
    for i in {1..15}; do
        if ! docker ps --format "{{.Names}}" | grep -qE "$CONTAINER_NAME|ollama|postgres|pgadmin|watchtower"; then
            echo "All services stopped successfully."
            return 0
        fi
        echo "Waiting for services to stop... ($i/15)"
        sleep 2
    done
    
    echo "Warning: Services did not stop gracefully. Forcing shutdown..."
    $COMPOSE_CMD down --remove-orphans -v
    docker ps -q | xargs -r docker stop
    
    echo "All services have been stopped."
}

function restart() {
    echo "Restarting services..."
    stop
    sleep 5
    start
}

function logs() {
    if [ $# -eq 0 ]; then
        echo "Fetching logs for all services..."
        $COMPOSE_CMD logs --tail=0 --follow
    else
        local container="$1"
        local tail_count="${2:-50}"  # Default to 50 lines if not specified
        
        # Validate container name
        case "$container" in
            ollama|open-webui|postgres|pgadmin|watchtower)
                echo "Fetching logs for $container..."
                docker logs "$container" --tail="$tail_count" --follow
                ;;
            *)
                echo "Error: Unknown container '$container'"
                echo "Available containers: ollama, open-webui, postgres, pgadmin, watchtower"
                return 1
                ;;
        esac
    fi
}

function clean() {
    echo "Cleaning up Docker resources..."
    
    echo "Stopping all containers..."
    $COMPOSE_CMD down
    
    echo "Removing stopped containers..."
    docker container prune -f
    
    echo "Removing unused images..."
    docker image prune -a -f
    
    echo "Removing unused volumes (including PostgreSQL data)..."
    docker volume prune -f
    
    echo "Clean up complete."
}

function stats() {
    echo "Monitoring GPU resources..."
    
    if command -v pipx run nvitop &> /dev/null; then
        echo "GPU Statistics (refreshing every 2 seconds, press Ctrl+C to exit):"
        echo "-------------------"
        pipx run nvitop
    elif command -v nvidia-smi &> /dev/null; then
        echo "GPU Statistics (refreshing every 2 seconds, press Ctrl+C to exit):"
        echo "-------------------"
        watch -n 2 nvidia-smi
    else
        echo "GPU monitoring not available: nvitop or nvidia-smi commands not found"
        exit 1
    fi
}

function status() {
    echo "Checking services status..."
    
    echo "Container Status:"
    echo "----------------"
    if docker ps --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
        echo "✅ Open WebUI container is running"
    else
        echo "❌ Open WebUI container is not running"
    fi
    
    if docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "✅ Ollama container is running"
    else
        echo "❌ Ollama container is not running"
    fi

    if docker ps --format "{{.Names}}" | grep -q "postgres"; then
        echo "✅ PostgreSQL container is running"
    else
        echo "❌ PostgreSQL container is not running"
    fi

    if docker ps --format "{{.Names}}" | grep -q "pgadmin"; then
        echo "✅ pgAdmin container is running"
    else
        echo "❌ pgAdmin container is not running"
    fi

    if docker ps --format "{{.Names}}" | grep -q "watchtower"; then
        echo "✅ Watchtower container is running"
    else
        echo "❌ Watchtower container is not running"
    fi
    
    echo -e "\nService Health:"
    echo "----------------"
    
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:11434/api/version 2>/dev/null | grep -q "200"; then
        echo "✅ Ollama API is responding"
    else
        echo "❌ Ollama API is not responding"
    fi
    
    echo -n "Open WebUI status: "
    WEBUI_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/health 2>/dev/null)
    if [ "$WEBUI_STATUS" = "200" ]; then
        echo "✅ Open WebUI is responding (HTTP 200)"
    else
        echo "❌ Open WebUI is not responding (HTTP $WEBUI_STATUS)"
        echo "Checking container logs:"
        docker logs $CONTAINER_NAME --tail 5
    fi

    echo -n "PostgreSQL status: "
    if docker exec postgres pg_isready -U "${POSTGRES_USER:-admin}" >/dev/null 2>&1; then
        echo "✅ PostgreSQL is responding"
    else
        echo "❌ PostgreSQL is not responding"
        echo "Checking PostgreSQL logs:"
        docker logs postgres --tail 5
    fi

    echo -n "pgAdmin status: "
    PGADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5050 2>/dev/null)
    if [ "$PGADMIN_STATUS" = "200" ] || [ "$PGADMIN_STATUS" = "302" ]; then
        echo -e "✅ pgAdmin is responding (HTTP $PGADMIN_STATUS)\n"
    else
        echo -e "❌ pgAdmin is not responding (HTTP $PGADMIN_STATUS)\n"
        echo "Checking pgAdmin logs:"
        docker logs pgadmin --tail 5
    fi
}

function add() {
    if [ -z "$1" ]; then
        echo "Error: Model name is required"
        echo "Usage: $0 add <model-name> [<model-name> ...]"
        echo "Example: $0 add starcoder2:latest"
        echo "Example: $0 add starcoder2:latest nomic-embed-text:latest"
        return 1
    fi

    echo "Adding model: $1"
    
    if ! docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "Error: Ollama container is not running. Please start the services first."
        return 1
    fi

    if docker exec ollama ollama pull "$1"; then
        echo "✅ Successfully added model: $1"
    else
        echo "❌ Failed to add model: $1"
        echo "Debug: Check if the model name is correct and the Ollama container is running."
        return 1
    fi
}

function remove() {
    if [ -z "$1" ]; then
        echo "Error: Model name is required"
        echo "Usage: $0 remove <model-name> [<model-name> ...]"
        echo "Example: $0 remove starcoder2:latest"
        echo "Example: $0 remove starcoder2:latest nomic-embed-text:latest"
        return 1
    fi

    echo "Removing model: $1"
    
    if ! docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "Error: Ollama container is not running. Please start the services first."
        return 1
    fi

    if docker exec ollama ollama rm "$1"; then
        echo "✅ Successfully removed model: $1"
    else
        echo "❌ Failed to remove model: $1"
        echo "Debug: Check if the model name is correct and the Ollama container is running."
        return 1
    fi
}

function list() {
    echo "Listing installed models..."
    
    if ! docker ps --format "{{.Names}}" | grep -q "ollama"; then
        echo "Error: Ollama container is not running. Please start the services first."
        return 1
    fi

    docker exec ollama ollama list
}

function help_menu() {
    echo "Usage: $0 {start|stop|restart|logs|clean|stats|status|add|remove|list|help|install-completion|check-env}"
    echo "Commands:"
    echo "  start                Start the AIXCL stack"
    echo "  stop                 Stop the AIXCL stack"
    echo "  restart              Restart all services"
    echo "  logs [container] [n] Show logs for all containers or a specific container (with optional number of lines)"
    echo "  clean                Remove unused Docker containers, images, and volumes"
    echo "  stats                Show resource usage statistics"
    echo "  status               Check services status"
    echo "  add <model-name>     Add one or more LLM's"
    echo "  remove <model-name>  Remove one or more LLM's"
    echo "  list                 List all installed LLM's"
    echo "  check-env           Check environment dependencies"
    echo "  help                 Show this help menu"
    echo "  install-completion   Install bash completion"
    exit 1
}

function install_completion() {
    echo "Installing bash completion for aixcl..."
    
    # Get the script directory
    SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
    COMPLETION_SCRIPT="${SCRIPT_DIR}/aixcl_completion.sh"
    
    if [[ ! -f "$COMPLETION_SCRIPT" ]]; then
        echo "Error: Completion script not found at $COMPLETION_SCRIPT"
        exit 1
    fi
    
    # Determine the appropriate completion directory
    if [[ -d "/etc/bash_completion.d" ]] && [[ -w "/etc/bash_completion.d" ]]; then
        # System-wide installation (requires write permission)
        COMPLETION_DIR="/etc/bash_completion.d"
    elif [[ -d "$HOME/.local/share/bash-completion/completions" ]]; then
        # User-specific installation (preferred)
        COMPLETION_DIR="$HOME/.local/share/bash-completion/completions"
    else
        # Create user directory if it doesn't exist
        COMPLETION_DIR="$HOME/.local/share/bash-completion/completions"
        mkdir -p "$COMPLETION_DIR"
    fi
    
    # Copy the completion script
    cp "$COMPLETION_SCRIPT" "$COMPLETION_DIR/aixcl"
    
    echo "Bash completion installed to $COMPLETION_DIR/aixcl"
    echo "To use it immediately, run: source $COMPLETION_DIR/aixcl"
    echo "It will be automatically loaded in new shell sessions."
    
    # Add to .bashrc if not already there
    if ! grep -q "source.*$COMPLETION_DIR/aixcl" "$HOME/.bashrc"; then
        # First remove any old entries to prevent duplicates
        if grep -q "Added by aixcl installer" "$HOME/.bashrc"; then
            # Create a temporary file without the old entries
            grep -v -A 3 "Added by aixcl installer" "$HOME/.bashrc" > "$HOME/.bashrc.tmp"
            # Remove any blank lines that might have been created
            sed -i '/^$/d' "$HOME/.bashrc.tmp"
            # Replace the original file
            mv "$HOME/.bashrc.tmp" "$HOME/.bashrc"
        fi
        
        # Now add the new entry
        echo "# Added by aixcl installer" >> "$HOME/.bashrc"
        echo "if [ -f \"$COMPLETION_DIR/aixcl\" ]; then" >> "$HOME/.bashrc"
        echo "    source \"$COMPLETION_DIR/aixcl\"" >> "$HOME/.bashrc"
        echo "fi" >> "$HOME/.bashrc"
        echo "Added sourcing to ~/.bashrc for persistent completion"
    else
        echo "Completion script already referenced in ~/.bashrc"
    fi
}

function main() {
    if [[ $# -lt 1 ]]; then
        help_menu
    fi

    case "$1" in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        logs)
            shift  # Remove the 'logs' command from the arguments
            logs "$@"  # Pass all remaining arguments to the logs function
            ;;
        clean)
            clean
            ;;
        stats)
            stats
            ;;
        status)
            status
            ;;
        add)
            shift  # Remove the 'add' command from the arguments
            for model in "$@"; do  # Loop through all remaining arguments
                add "$model"  # Call the add function for each model
            done
            ;;
        remove)
            shift  # Remove the 'remove' command from the arguments
            for model in "$@"; do  # Loop through all remaining arguments
                remove "$model"  # Call the remove function for each model
            done
            ;;
        list)
            list
            ;;
        help)
            help_menu
            ;;
        install-completion)
            install_completion
            ;;
        check-env)
            check_env
            ;;
        *)
            help_menu
            ;;
    esac
}

# Function to modify docker-compose.yml for macOS
function modify_docker_compose_for_macos() {
    local OS_TYPE=$(uname -s)

    if [[ "$OS_TYPE" == "Darwin" ]]; then
        echo "Detected macOS. Ensuring platform: linux/arm64 and OLLAMA_LLM_LIBRARY=metal are set for ollama service in $COMPOSE_FILE."
        echo "Commenting out NVIDIA-related deploy and runtime settings if present."

        # Create a backup before modifying the file
        # cp "$COMPOSE_FILE" "${COMPOSE_FILE}.backup"

        # Process YAML file correctly
        awk '
            BEGIN {inside_ollama=0; inside_env=0; added_platform=0; added_env=0; inside_deploy=0; inside_runtime=0; indent=""}
            /services:/ {print; next} 
            /ollama:/ {
                print;
                inside_ollama=1;
                next
            }
            inside_ollama && /^[^[:space:]]/ {
                inside_ollama=0
            }
            inside_ollama && /platform: linux\/arm64/ {added_platform=1}


            # Detect and comment out the full deploy section, preserving indentation
            inside_ollama && /deploy:/ {
                print "# " $0;
                inside_deploy=1;
                indent=match($0, /[^ ]/)-1;  # Capture indentation level
                next
            }
            inside_deploy {
                if (match($0, /[^ ]/)-1 > indent) {
                    print "# " $0;
                    next
                } else {
                    inside_deploy=0;  # Stop commenting when indentation level decreases
                }
            }

            # Detect and comment out the runtime section, preserving indentation
            inside_ollama && /runtime:/ {
                print "# " $0;
                inside_runtime=1;
                indent=match($0, /[^ ]/)-1;  # Capture indentation level
                next
            }
            inside_runtime {
                if (match($0, /[^ ]/)-1 > indent) {
                    print "# " $0;
                    next
                } else {
                    inside_runtime=0;  # Stop commenting when indentation level decreases
                }
            }

            inside_ollama && !added_platform {
                print "    platform: linux/arm64"
                added_platform=1
            }

            inside_ollama && inside_env && /^[^[:space:]]/ {
                inside_env=0
            }

            inside_ollama && /volumes:/ {inside_ollama=0}  # Stop modifying at volumes section
            {print}
        ' "$COMPOSE_FILE" > temp.yml && mv temp.yml "$COMPOSE_FILE"

        echo "✅ Updated $COMPOSE_FILE: updated parameters of docker-compose file for MacOs."
    else
        echo "Detected non-macOS system. No changes needed for $COMPOSE_FILE."
    fi
}

main "$@"